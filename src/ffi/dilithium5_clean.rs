/* automatically generated by rust-bindgen 0.59.2 */

pub const PQCLEAN_DILITHIUM5_CLEAN_CRYPTO_PUBLICKEYBYTES: usize = 2592;
pub const PQCLEAN_DILITHIUM5_CLEAN_CRYPTO_SECRETKEYBYTES: usize = 4864;
pub const PQCLEAN_DILITHIUM5_CLEAN_CRYPTO_BYTES: usize = 4595;
use usize as size_t;

extern "C" {
    pub fn PQCLEAN_DILITHIUM5_CLEAN_crypto_sign_keypair(
        pk: *mut u8,
        sk: *mut u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PQCLEAN_DILITHIUM5_CLEAN_crypto_sign_signature(
        sig: *mut u8,
        siglen: *mut size_t,
        m: *const u8,
        mlen: size_t,
        sk: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PQCLEAN_DILITHIUM5_CLEAN_crypto_sign_verify(
        sig: *const u8,
        siglen: size_t,
        m: *const u8,
        mlen: size_t,
        pk: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PQCLEAN_DILITHIUM5_CLEAN_crypto_sign(
        sm: *mut u8,
        smlen: *mut size_t,
        m: *const u8,
        mlen: size_t,
        sk: *const u8,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn PQCLEAN_DILITHIUM5_CLEAN_crypto_sign_open(
        m: *mut u8,
        mlen: *mut size_t,
        sm: *const u8,
        smlen: size_t,
        pk: *const u8,
    ) -> ::std::os::raw::c_int;
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_sign_verify() {
        let msg = b"hello world";

        let mut seckey = [0u8; PQCLEAN_DILITHIUM5_CLEAN_CRYPTO_SECRETKEYBYTES];
        let mut pubkey = [0u8; PQCLEAN_DILITHIUM5_CLEAN_CRYPTO_PUBLICKEYBYTES];
        let res = unsafe {
            PQCLEAN_DILITHIUM5_CLEAN_crypto_sign_keypair(&mut pubkey as *mut u8, &mut seckey as *mut u8)
        };
        assert_eq!(res, 0);

        let mut sig = [9u8; PQCLEAN_DILITHIUM5_CLEAN_CRYPTO_BYTES];
        let mut len: usize = 0;
        let res = unsafe {
            PQCLEAN_DILITHIUM5_CLEAN_crypto_sign_signature(&mut sig as *mut u8, &mut len as *mut usize, msg as *const u8, msg.len(), &seckey as *const u8)
        };
        assert_eq!(res, 0);

        let res = unsafe {
            PQCLEAN_DILITHIUM5_CLEAN_crypto_sign_verify(&sig as *const u8, len, msg as *const u8, msg.len(), &pubkey as *const u8)
        };
        assert_eq!(res, 0, "Invalid signature crated!");
    }
}
